{
  "_args": [
    [
      {
        "raw": "d3-selection-multi",
        "scope": null,
        "escapedName": "d3-selection-multi",
        "name": "d3-selection-multi",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/michael/Documents/Coding/Developer/d3 prac"
    ]
  ],
  "_from": "d3-selection-multi@latest",
  "_id": "d3-selection-multi@1.0.1",
  "_inCache": true,
  "_location": "/d3-selection-multi",
  "_nodeVersion": "7.3.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/d3-selection-multi-1.0.1.tgz_1487660504590_0.49165939749218524"
  },
  "_npmUser": {
    "name": "mbostock",
    "email": "mike@ocks.org"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "d3-selection-multi",
    "scope": null,
    "escapedName": "d3-selection-multi",
    "name": "d3-selection-multi",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/d3-selection-multi/-/d3-selection-multi-1.0.1.tgz",
  "_shasum": "cd6c25413d04a2cb97470e786f2cd877f3e34f58",
  "_shrinkwrap": null,
  "_spec": "d3-selection-multi",
  "_where": "/Users/michael/Documents/Coding/Developer/d3 prac",
  "author": {
    "name": "Mike Bostock",
    "url": "http://bost.ocks.org/mike"
  },
  "bugs": {
    "url": "https://github.com/d3/d3-selection-multi/issues"
  },
  "dependencies": {
    "d3-selection": "1",
    "d3-transition": "1"
  },
  "description": "Multi-value map syntax for D3 selections.",
  "devDependencies": {
    "eslint": "3",
    "jsdom": "9",
    "package-preamble": "0.0",
    "rollup": "0.41",
    "tape": "4",
    "uglify-js": "2"
  },
  "directories": {},
  "dist": {
    "shasum": "cd6c25413d04a2cb97470e786f2cd877f3e34f58",
    "tarball": "https://registry.npmjs.org/d3-selection-multi/-/d3-selection-multi-1.0.1.tgz"
  },
  "gitHead": "eca50ebce40acbd75df342a00322fae89e1dd6e2",
  "homepage": "https://github.com/d3/d3-selection-multi",
  "jsnext:main": "index",
  "keywords": [
    "d3",
    "d3-module",
    "dom",
    "selection"
  ],
  "license": "BSD-3-Clause",
  "main": "build/d3-selection-multi.js",
  "maintainers": [
    {
      "name": "mbostock",
      "email": "mike@ocks.org"
    }
  ],
  "module": "index",
  "name": "d3-selection-multi",
  "optionalDependencies": {},
  "readme": "# d3-selection-multi\n\nThis module adds multi-value syntax to [selections](https://github.com/d3/d3-selection) and [transitions](https://github.com/d3/d3-transition), allowing you to set multiple attributes, styles or properties simultaneously with more concise syntax. For example:\n\n```js\nd3.select(\"body\").append(\"div\")\n    .attrs({\n      title: \"A cheery, timeless greeting.\",\n      class: \"greeting\"\n    })\n    .text(\"Hello, world!\");\n```\n\nThis is equivalent to:\n\n```js\nd3.select(\"body\").append(\"div\")\n    .attr(\"title\", \"A cheery, timeless greeting.\")\n    .attr(\"class\", \"greeting\")\n    .text(\"Hello, world!\");\n```\n\nLike [*selection*.attr](https://github.com/d3/d3-selection#selection_attr), the values in the multi-value object can be functions of data:\n\n```js\nd3.select(\"body\").append(\"div\")\n    .attrs({\n      title: function(d) { return d.title; },\n      id: function(d, i) { return \"id-\" + i; },\n    });\n```\n\nAlternatively, you can pass a function which returns an object, allowing you to share some computational effort across multiple attributes, or to determine which attribute to set dynamically:\n\n```js\nd3.select(\"body\").append(\"div\")\n    .attrs(function(d, i) { return {title: d.title, id: \"id-\" + i}; });\n```\n\nThis module is not included in the [default D3 bundle](https://github.com/d3/d3) for parsimony’s sake: the single-value methods such as [*selection*.attr](https://github.com/d3/d3-selection#selection_attr) are recommended for most users, as there is little benefit to the shorter syntax provided by these convenience method.\n\n## Installing\n\nIf you use NPM, `npm install d3-selection-multi`. Otherwise, download the [latest release](https://github.com/d3/d3-selection-multi/releases/latest) or load directly from [d3js.org](https://d3js.org) as a [standalone library](https://d3js.org/d3-selection-multi.v1.min.js). AMD, CommonJS, and vanilla environments are supported. In vanilla, a `d3` global is exported:\n\n```html\n<script src=\"https://d3js.org/d3-color.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-dispatch.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-ease.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-interpolate.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-selection.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-timer.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-transition.v1.min.js\"></script>\n<script src=\"https://d3js.org/d3-selection-multi.v1.min.js\"></script>\n<script>\n\nvar div = d3.selectAll(\"div\")\n    .attrs({title: \"Hello, world!\"})\n    .styles({\"color\": \"red\"});\n\n</script>\n```\n\nOr, in combination with the [D3 default bundle](https://github.com/d3/d3):\n\n```html\n<script src=\"https://d3js.org/d3.v4.min.js\"></script>\n<script src=\"https://d3js.org/d3-selection-multi.v1.min.js\"></script>\n<script>\n\nvar div = d3.selectAll(\"div\")\n    .attrs({title: \"Hello, world!\"})\n    .styles({\"color\": \"red\"});\n\n</script>\n```\n\n[Try d3-selection-multi in your browser.](https://tonicdev.com/npm/d3-selection-multi)\n\n## API Reference\n\n<a name=\"selection_attrs\" href=\"#selection_attrs\">#</a> <i>selection</i>.<b>attrs</b>(<i>values</i>)\n\nA convenience method on top of [*selection*.attr](https://github.com/d3/d3-selection#selection_attr) for setting multiple attributes. If the specified *values* is an object, the values may be specified either as strings or functions. For example:\n\n```js\nselection.attrs({foo: \"foo-value\", bar: function(d) { return d.bar; }});\n```\n\nIf a value is a constant, all elements are given the same attribute value; otherwise, if a value is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s attribute. A null value will remove the specified attribute.\n\nIf the specified *values* is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value must be an object with string values, which are then used to set attributes on the current element. For example:\n\n```js\nselection.attrs(function(d) { return {foo: \"foo-value\", bar: d.bar}; });\n```\n\nPassing a function to *selection*.attrs is convenient for sharing some computational effort or state across multiple attributes, or for specifying dynamically which attributes to set.\n\n<a name=\"selection_styles\" href=\"#selection_styles\">#</a> <i>selection</i>.<b>styles</b>(<i>values</i>[, <i>priority</i>])\n\nA convenience method on top of [*selection*.style](https://github.com/d3/d3-selection#selection_style) for setting multiple style properties. If the specified *values* is an object, the values may be specified either as strings or functions. For example:\n\n```js\nselection.styles({fill: \"red\", stroke: function(d) { return d.stroke; }});\n```\n\nIf a value is a constant, all elements are given the same style property value; otherwise, if a value is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s style properties. A null value will remove the specified style properties.\n\nIf the specified *values* is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value must be an object with string values, which are then used to set style properties on the current element. For example:\n\n```js\nselection.styles(function(d) { return {fill: \"red\", stroke: d.stroke}; });\n```\n\nPassing a function to *selection*.styles is convenient for sharing some computational effort or state across multiple style properties, or for specifying dynamically which style properties to set.\n\n<a name=\"selection_properties\" href=\"#selection_properties\">#</a> <i>selection</i>.<b>properties</b>(<i>values</i>)\n\nA convenience method on top of [*selection*.property](https://github.com/d3/d3-selection#selection_property) for setting multiple element properties. If the specified *values* is an object, the values may be specified either as strings or functions. For example:\n\n```js\nselection.properties({foo: \"foo-value\", id: function(d, i) { return \"id-\" + i; }});\n```\n\nIf a value is a constant, all elements are given the same property value; otherwise, if a value is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value is then used to set each element’s properties. A null value will remove the specified properties.\n\nIf the specified *values* is a function, the function is evaluated for each selected element, in order, being passed the current datum (*d*), the current index (*i*), and the current group (*nodes*), with *this* as the current DOM element. The function’s return value must be an object with string values, which are then used to set properties on the current element. For example:\n\n```js\nselection.properties(function(d, i) { return {foo: \"foo-value\", id: \"id-\" + i}; });\n```\n\nPassing a function to *selection*.properties is convenient for sharing some computational effort or state across multiple properties, or for specifying dynamically which properties to set.\n\n<a name=\"transition_attrs\" href=\"#transition_attrs\">#</a> <i>transition</i>.<b>attrs</b>(<i>values</i>)\n\nLike [*selection*.attrs](#selection_attrs), but for [*transition*.attr](https://github.com/d3/d3-transition#transition_attr).\n\n<a name=\"transition_styles\" href=\"#transition_styles\">#</a> <i>transition</i>.<b>styles</b>(<i>values</i>[, <i>priority</i>])\n\nLike [*selection*.styles](#selection_styles), but for [*transition*.style](https://github.com/d3/d3-transition#transition_style).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/d3/d3-selection-multi.git"
  },
  "scripts": {
    "postpublish": "git push && git push --tags && cd ../d3.github.com && git pull && cp ../d3-selection-multi/build/d3-selection-multi.js d3-selection-multi.v1.js && cp ../d3-selection-multi/build/d3-selection-multi.min.js d3-selection-multi.v1.min.js && git add d3-selection-multi.v1.js d3-selection-multi.v1.min.js && git commit -m \"d3-selection-multi ${npm_package_version}\" && git push && cd - && zip -j build/d3-selection-multi.zip -- LICENSE README.md build/d3-selection-multi.js build/d3-selection-multi.min.js",
    "prepublish": "npm run test && uglifyjs --preamble \"$(preamble)\" build/d3-selection-multi.js -c -m -o build/d3-selection-multi.min.js",
    "pretest": "rm -rf build && mkdir build && rollup --banner \"$(preamble)\" -f umd -g d3-selection:d3,d3-transition:d3 -n d3 -o build/d3-selection-multi.js -- index.js",
    "test": "tape 'test/**/*-test.js' && eslint index.js src"
  },
  "version": "1.0.1"
}
